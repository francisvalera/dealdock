generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Blog {
  id        String   @id
  title     String
  body      String
  featured  Boolean  @default(false)
  imageUrl  String?
  createdAt DateTime @default(now())
}

model Brand {
  id        String    @id
  name      String    @unique
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  Product   Product[]
}

model CarouselItem {
  id        String   @id
  title     String?
  imageUrl  String
  active    Boolean  @default(true)
  sort      Int      @default(0)
  createdAt DateTime @default(now())
}

model Cart {
  id        String     @id
  userId    String?
  sessionId String?
  updatedAt DateTime
  User      User?      @relation(fields: [userId], references: [id])
  CartItem  CartItem[]
}

model CartItem {
  id        String  @id
  cartId    String
  productId String
  qty       Int     @default(1)
  price     Decimal @db.Decimal(10, 2)
  Cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  Product   Product @relation(fields: [productId], references: [id])
}

model Category {
  id          String        @id
  name        String
  featured    Boolean       @default(false)
  active      Boolean       @default(true)
  Subcategory Subcategory[]
}

model Discount {
  id            String       @id
  code          String?
  type          DiscountType
  value         Decimal      @db.Decimal(10, 2)
  active        Boolean      @default(true)
  productId     String?
  categoryId    String?
  subcategoryId String?
}

model Domain {
  id       String @id
  host     String @unique
}

model Order {
  id           String        @id
  userId       String?
  status       OrderStatus   @default(PENDING)
  total        Decimal       @db.Decimal(10, 2)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime
  User         User?         @relation(fields: [userId], references: [id])
  OrderItem    OrderItem[]
  ShippingInfo ShippingInfo?
}

model OrderItem {
  id        String  @id
  orderId   String
  productId String
  name      String
  sku       String?
  size      String?
  price     Decimal @db.Decimal(10, 2)
  qty       Int     @default(1)
  Order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Product   Product @relation(fields: [productId], references: [id])
}

model Product {
  id            String         @id
  name          String
  description   String
  sku           String?
  brandId       String
  subcategoryId String
  model         String?
  size          String?
  price         Decimal        @db.Decimal(10, 2)
  stock         Int            @default(0)
  active        Boolean        @default(true)
  isFeatured    Boolean        @default(false)
  createdAt     DateTime       @default(now())
  CartItem      CartItem[]
  OrderItem     OrderItem[]
  Brand         Brand          @relation(fields: [brandId], references: [id], onUpdate: NoAction)
  Subcategory   Subcategory    @relation(fields: [subcategoryId], references: [id], onUpdate: NoAction)
  ProductImage  ProductImage[]
}

model ProductImage {
  id        String  @id
  url       String
  primary   Boolean @default(false)
  productId String
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Settings {
  id                  String   @id @default(cuid())
  emailOrdersEnabled  Boolean @default(true)
  storeEmail          String  @default("orders@kuyakardz.com")
  singleton           Int      @default(1) @unique
  storeName           String
  name                String?
  logoUrl             String?
  promoStrip          String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @default(now())
}

model ShippingInfo {
  id       String  @id
  orderId  String  @unique
  fullName String
  phone    String
  email    String?
  province String
  city     String
  barangay String
  street   String
  Order    Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Subcategory {
  id         String    @id
  name       String
  active     Boolean   @default(true)
  categoryId String
  Product    Product[]
  Category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([categoryId, name], map: "Subcategory_category_name_uq")
}

model Tenant {
  id         String       @id
  name       String
  theme      Json?
  email      String?
  logoUrl    String?
  active     Boolean      @default(true)
  createdAt  DateTime     @default(now())
  slug       String       @unique
}

model User {
  id         String       @id
  email      String       @unique
  name       String?
  image      String?
  phone      String?
  role       Role         @default(USER)
  password   String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime
  Account    Account[]
  Cart       Cart[]
  Order      Order[]
  Session    Session[]
  UserTenant UserTenant[]
}

model UserTenant {
  id       String @id
  userId   String
  role     Role   @default(USER)
  User     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum DiscountType {
  PERCENT
  FIXED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum Role {
  USER
  ADMIN
}
