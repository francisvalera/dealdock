generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum DiscountType {
  PERCENT
  FIXED
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  image     String?
  phone     String?
  role      Role      @default(USER)
  password  String? // null if Google SSO only
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  sessions  Session[]
  orders    Order[]
  cart      Cart?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Brand {
  id        String    @id @default(cuid())
  name      String    @unique
  active    Boolean   @default(true)
  products  Product[]
  createdAt DateTime  @default(now())
}

model Category {
  id       String        @id @default(cuid())
  name     String
  featured Boolean       @default(false)
  active   Boolean       @default(true)
  subcats  Subcategory[]
}

model Subcategory {
  id         String    @id @default(cuid())
  name       String
  active     Boolean   @default(true)
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id])
  products   Product[]
}

model Product {
  id            String         @id @default(cuid())
  name          String
  description   String         @db.Text
  sku           String?        @unique
  brandId       String
  brand         Brand          @relation(fields: [brandId], references: [id])
  subcategoryId String
  subcategory   Subcategory    @relation(fields: [subcategoryId], references: [id])
  model         String?
  size          String?
  price         Decimal        @db.Decimal(10, 2)
  stock         Int            @default(0)
  active        Boolean        @default(true)
  isFeatured    Boolean        @default(false)
  images        ProductImage[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  createdAt     DateTime       @default(now())
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  primary   Boolean @default(false)
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?    @unique
  user      User?      @relation(fields: [userId], references: [id])
  sessionId String? // for guests via cookie
  items     CartItem[]
  updatedAt DateTime   @updatedAt

  @@index([sessionId])
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  qty       Int     @default(1)
  price     Decimal @db.Decimal(10, 2)
}

model Order {
  id        String        @id @default(cuid())
  userId    String?
  user      User?         @relation(fields: [userId], references: [id])
  status    OrderStatus   @default(PENDING)
  items     OrderItem[]
  total     Decimal       @db.Decimal(10, 2)
  shipping  ShippingInfo?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  name      String
  sku       String?
  size      String?
  price     Decimal @db.Decimal(10, 2)
  qty       Int     @default(1)
}

model ShippingInfo {
  id       String  @id @default(cuid())
  orderId  String  @unique
  fullName String
  phone    String
  email    String?
  province String
  city     String
  barangay String
  street   String
  order    Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Blog {
  id        String   @id @default(cuid())
  title     String
  body      String   @db.Text
  featured  Boolean  @default(false)
  imageUrl  String?
  createdAt DateTime @default(now())
}

model CarouselItem {
  id        String   @id @default(cuid())
  title     String?
  imageUrl  String
  active    Boolean  @default(true)
  sort      Int      @default(0)
  createdAt DateTime @default(now())
}

model Discount {
  id            String       @id @default(cuid())
  code          String?      @unique
  type          DiscountType
  value         Decimal      @db.Decimal(10, 2)
  active        Boolean      @default(true)
  productId     String?
  categoryId    String?
  subcategoryId String?
}

model Settings {
  id                 String  @id @default(cuid())
  storeName          String  @default("Kuya Kardz Motorcycle Trading")
  emailOrdersEnabled Boolean @default(true)
  storeEmail         String  @default("orders@kuyakardz.com")
}

model Tenant {
  id      String  @id @default(cuid())
  name    String
  theme   Json?
  email   String?
  logoUrl String?
  active  Boolean @default(true)
}
